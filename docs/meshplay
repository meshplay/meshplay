# Copyright Meshplay Authors
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

#!/usr/bin/env bash

# Get the platform to deploy Meshplay from the flag
# Get the deploy option on whether to install cli alone or to deploy Meshplay server as well
# Default option is to start Meshplay server

while getopts ":np:" opt; do
    case $opt in
    n)
        DEPLOY_MESHPLAY=false
        ;;
    p)
        case $OPTARG in
        docker)
            PLATFORM="docker"
            ;;
        kubernetes)
            PLATFORM="kubernetes"
            ;;
        *)
            echo "Invalid platform. Enter a valid platform to deploy Meshplay [docker, kubernetes]:"
            read PLATFORM < /dev/tty
            LCOUNTER=1
            # Loop until a valid platform is provided from the user, exit after 5 tries
            until [ "$PLATFORM" == "docker" ] || [ "$PLATFORM" == "kubernetes" ]; do
          
                if [ $LCOUNTER -eq 5 ]; then
                    echo "Too many invalid attempts. Please try again."
                    exit 1
                fi
            echo "Invalid platform. Enter a valid platform to deploy Meshplay [docker, kubernetes]:"
            read PLATFORM < /dev/tty
            let LCOUNTER++
            done
            ;;
        esac
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    :)
        echo "Option -$OPTARG requires a platform argument." >&2
        exit 1
        ;;
    esac
done

# If user wants to install the cli and deploy meshplay as well, read the platform flag
if [ "$DEPLOY_MESHPLAY" != false ]; then
  # If no platform flag is present, prompt the user for a platform
  if [ ! "$PLATFORM" ]; then
      echo Enter a platform to deploy Meshplay. Available platforms [docker, kubernetes]:
      read PLATFORM < /dev/tty
  fi

  case "$PLATFORM" in
  docker | kubernetes) ;;

  *)
      echo "Invalid platform. Enter a valid platform to deploy Meshplay [docker, kubernetes]:"
      read PLATFORM < /dev/tty
      LCOUNTER=1
      # Loop until a valid platform is provided from the user, exit after 5 tries
      until [ "$PLATFORM" == "docker" ] || [ "$PLATFORM" == "kubernetes" ]; do
          
          if [ $LCOUNTER -eq 5 ]; then
              echo "Too many invalid attempts. Please try again."
              exit 1
          fi
          echo "Invalid platform. Enter a valid platform to deploy Meshplay [docker, kubernetes]:"
          read PLATFORM < /dev/tty
          let LCOUNTER++
      done
      ;;
  esac
fi


####### COMMON FUNCTIONS
############################
command_exists() {
    command -v $1 >/dev/null 2>&1
}

#######   IDENTIFY OS
############################

OSARCHITECTURE="$(uname -m)"
OS="$(uname)"

if [ "x${OS}" = "xDarwin" ] ; then
  OSEXT="Darwin"
else
  OSEXT="Linux"
fi

#######   PREFLIGHT CHECK
############################

if ! command_exists curl ; then
    echo "Missing required utility: 'curl'. Please install 'curl' and try again."
    exit;
fi

if ! command_exists unzip ; then
    echo "Missing required utility: 'unzip'. Please install 'unzip' and try again."
    exit;
fi

if [ "x${MESHPLAY_VERSION}" = "x" ] ; then
  MESHPLAY_VERSION=$(curl -L -s https://github.com/meshplay/meshplay/releases/latest | \
                  grep "/releases/tag/" | head -1 | awk -F '"' '{print $4}' | \
                  awk -F '/' '{print $NF}' )
fi

if [ "x${MESHPLAY_VERSION}" = "x" ] ; then
  printf "Unable to get latest meshplayctl version. Set MESHPLAY_VERSION env var and re-run. For example: export MESHPLAY_VERSION=v0.1.6\n"
  exit;
fi

NAME="meshplayctl-${MESHPLAY_VERSION}"
URL="https://github.com/meshplay/meshplay/releases/download/${MESHPLAY_VERSION}/meshplayctl_${MESHPLAY_VERSION:1}_${OSEXT}_${OSARCHITECTURE}.zip"

printf "\nDownloading %s for %s...\n\n" "$NAME" "$OSEXT"
curl -L ${URL} -o ${PWD}/meshplay.zip

validFile=`file ${PWD}/meshplay.zip | grep 'Zip archive data'`
if [ -z "$validFile" ] ; then
  printf "Unable to download meshplay.zip file from ${URL}. Set MESHPLAY_VERSION environment variable to a different version and re-run. For example: export MESHPLAY_VERSION=v0.1.6\n"
  exit;
fi

# Generate a temporary folder to store intermediate installation files
temporary_dir_name=$(tr -dc A-Za-z0-9 </dev/urandom 2>/dev/null | head -c 16)
if [ -z "$temporary_dir_name" ] ; then
   temporary_dir_name="temp_extract_dir"
fi

mkdir $temporary_dir_name
if [ $? -ne 0 ] ; then
  rm ${PWD}/meshplay.zip
  printf "Disk space is low on the system, Re-try installation after cleaning up some files.\n"
  exit 1;
fi

printf "\nExtracting %s to temporary folder %s...\n" "$NAME" "$temporary_dir_name"
unzip ${PWD}/meshplay.zip -d ${PWD}/$temporary_dir_name

# Use user provided installation path from env variable(MESHPLAY_INSTALL_DIR)
# by default its /usr/local/bin
install_dir=${MESHPLAY_INSTALL_DIR}
if [ -z "$install_dir" ]
then
    install_dir="/usr/local/bin"
fi

printf "\nInstalling meshplayctl in $install_dir.\n"
WHOAMI=$(whoami)
if mv ${PWD}/$temporary_dir_name/meshplayctl $install_dir/meshplayctl >/dev/null 2>&1; then
  echo "meshplayctl installed."
else
  if sudo mv ${PWD}/$temporary_dir_name/meshplayctl $install_dir/meshplayctl ; then
    echo "Permission Resolved: meshplayctl installed using sudo permissions."
  else
    echo "Cannot install meshplayctl. Check permissions of $WHOAMI for $install_dir."
    exit 1
  fi
fi

#Transferring permissions and ownership to client USER
if [ "$SUDO_USER" == "" ] ;
then
  if chown $WHOAMI $install_dir/meshplayctl ; then
    # Give write access to user to create .meshplay folder in home directory
    chown $WHOAMI $HOME
    chmod u+w $HOME
    echo "permissions moved to "$WHOAMI
  else
    echo "Unable to write to $install_dir. Please verify write permission for $WHOAMI."
    exit 1
  fi
else
  if chown $SUDO_USER /usr/local/bin/meshplayctl ; then
    # Give write access to SUDO_USER to create .meshplay folder in home directory
    chown $SUDO_USER $HOME
    chmod u+w $HOME
    echo "permissions moved to "$SUDO_USER
  else
    echo "Unable to write to $install_dir/meshplayctl. Please verify write permission for $SUDO_USER."
    exit 1
  fi
fi


printf "Removing installation files"
rm -rf meshplay.zip ${PWD}/$temporary_dir_name/

if [ "$DEPLOY_MESHPLAY" == false ] ;
then
    printf "\nRun \"meshplayctl system start\" to start Meshplay.\n"
    exit 0
fi

# if ADAPTERS are empty then we'd use default local context else go we'd create custom context, which only fetches required adapters
# Valid adapter option are
# cpx
# consul
# istio
# linkerd
# nsm
# kuma
# cpx
# osm
# traefik
# nginx
# tanzu
# app
# cilium

## Any adapter other than above would be ignored
if [ ! -z "$ADAPTERS" ]; then
    adpaterString=
    for adapter in $ADAPTERS; do
        case $adapter in
            cpx|consul|istio|linkerd|nsm|kuma|cpx|osm|cilium)
                adapterString="$adapterString -a meshplay-$adapter "
            ;;
            nginx|tanzu)
                adapterString="$adapterString -a meshplay-$adapter-sm "
            ;;
            traefik|app)
                adapterString="$adapterString -a meshplay-$adapter-mesh "
            ;;
            *)
                # We are just neglecting invalid mesh options
            ;;
        esac    
    done

    meshplayctl system context create custom -s $adapterString --yes
fi

printf "\nDeploying Meshplay...\n"
meshplayctl system start --yes --platform $PLATFORM
