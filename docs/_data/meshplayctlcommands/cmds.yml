global:
  name: meshplayctl
  description: A global command that displays an overview of all commands.
  usage: meshplayctl
  example: |
    meshplayctl
      meshplayctl --help
      meshplayctl version

  flags:
    config:
      name: --config
      description: configures Meshplay with the meshconfig, generated with the help of user details to provide cluster access for public clouds(GKE/EKS).
      usage: meshplayctl [command] --config=[path to config file]
      example: meshplayctl system reset --config="~/.meshplay/config.yaml"
    help:
      name: --help, -h
      description: Displays helpful information about any command.
      usage: meshplayctl --help
      example: |
        meshplayctl perf --help
          meshplay system start --help
    verbose:
      name: --verbose, -v
      description: Sets the log level to debug for verbose output and displays verboose/debug logs.
      usage: meshplayctl [commands] --verbose
      example: |
        meshplayctl system update --verbose

  subcommands:
    version:
      name: version
      description: Displays the version of the Meshplay Client (meshplayctl) and the SHA of the release binary.
      usage: meshplayctl version

    completion:
      name: completion
      description: Output shell completion code for the specified shell.
      usage: meshplayctl completion [bash|zsh|fish]
      example: |
        meshplayctl completion bash
          meshplayctl completion zsh
          meshplayctl completion fish

system:
  name: system
  description: Lifecycle management of Meshplay deployments
  usage: meshplayctl system [flags]

  flags:
    context:
      name: --context, -c
      arg: system
      description: Temporarily override your current context by specifying an alternative context as an argument.
      usage: meshplayctl system reset -c [temporary context name]
      example: |

        # Resets the given context
        meshplayctl system reset -c docker-edge

  subcommands:
    start:
      name: start
      arg: system
      description: Start Meshplay
      usage: meshplayctl system start
      notes:
        name: Set k8s context
        description: To create a new context for in-cluster Kubernetes deployments and set the new context as your current-context
        usage: meshplayctl system context create k8s -p kubernetes -s
      flags:
        skip-update:
          name: --skip-update
          description: (optional) skip checking for new updates available in Meshplay.
          usage: meshplayctl system start --skip-update
        reset:
          name: --reset
          description: Reset Meshplay’s configuration file to default settings.
          usage: meshplayctl system start --reset
        skip-browser:
          name: --skip-browser
          description: (optional) skip opening of MeshplayUI in browser.
          usage: meshplayctl system start --skip-browser
        platform:
          name: --platform, -p
          description: platform to deploy Meshplay to.
          usage: meshplayctl system start -p kubernetes

    stop:
      name: stop
      arg: system
      description: Stop Meshplay
      usage: meshplayctl system stop
      flags:
        reset:
          name: --reset
          description: Reset Meshplay’s configuration file to default settings.
          usage: meshplayctl system stop --reset
        keep-namespace:
          name: --keep-namespace
          description: (optional) keep the Meshplay namespace during uninstallation
          usage: meshplayctl system stop --keep-namespace
        force:
          name: --force
          description: (optional) uninstall Meshplay resources forcefully
          usage: meshplayctl system stop --force

    update:
      name: update
      description: Pull new Meshplay images from Docker Hub. Does not update `meshplayctl`. This command may be executed while Meshplay is running.
      usage: meshplayctl system update
      flags:
        skip-reset:
          name: --skip-reset
          description: Pull the latest manifest files
          usage: meshplayctl system update --skip-reset

    config:
      name: config
      description: Configures Meshplay to use a Kubernetes cluster.
      usage: meshplayctl system config [minikube | gke | aks | eks] [flags]
      example: |
        meshplayctl system config minikube
          meshplayctl system config eks
      flags:
        token:
          name: --token
          description: Path to token for authenticating to Meshplay API.
          usage: meshplayctl system config --token [path-to-file]
          example: meshplayctl system config --token "~/Downloads/auth.json"
      examples:
        aks:
          name: aks
          description: To configure Meshplay to use Azure Kubernetes Service
          usage: meshplayctl system config aks --token [path-to-token]
        eks:
          name: eks
          description: To configure Meshplay to use Elastic Kubernetes Service
          usage: meshplayctl system config eks --token [path-to-token]
        gke:
          name: gke
          description: To configure Meshplay to use Google Kubernetes Engine
          usage: meshplayctl system config gke --token [path-to-token]

    logs:
      name: logs
      description: Starts tailing Meshplay server debug logs
      usage: |
        # View logs for specific component
        meshplayctl system logs [component-name]
      example: |
        meshplayctl system logs --verbose
          meshplayctl system logs meshplay-istio
      flags:
        follow:
          name: --follow, -f
          description: (Optional) Follow the stream of the Meshplay's logs. Defaults to false.
          usage: meshplayctl system logs --follow

    reset:
      name: reset
      description: Resets meshplay.yaml file with a copy from Meshplay repo
      usage: meshplayctl system reset

    restart:
      name: restart
      description: restart all Meshplay containers, their instances and their connected volumes
      usage: meshplayctl system restart
      flags:
        skip-update:
          name: --skip-update
          description: (optional) skip checking for new updates available in Meshplay.
          usage: meshplayctl system restart --skip-update

    status:
      name: status
      description: Check status of Meshplay, Meshplay adapters, Meshplay Operator and its controllers.
      usage: meshplayctl system status
      flags:
        verbose:
          name: --verbose, -v
          description: (optional) Extra data in status table
          usage: meshplayctl system status

    dashboard:
      name: dashboard
      description: Open Meshplay UI in browser.
      usage: meshplayctl system dashboard [flags]
      example: meshplayctl system dashboard --port-forward
      flags:
        port-forward:
          name: --port-forward
          description: (optional) Use port forwarding to access Meshplay UI
          usage: meshplayctl system dashboard --port-forward
          example: meshplayctl system dashboard --port-forward
        skip-browser:
          name: --skip-browser
          description: (optional) skip opening of MeshplayUI in browser.
          usage: meshplayctl system dashboard --skip-browser
          example: meshplayctl system dashboard --skip-browser

    login:
      name: login
      description: "Authenticate with the Meshplay Provider of your choice: the Local Provider or a Remote Provider."
      usage: meshplayctl system login
      flags:
        provider:
          name: --provider, -p
          description: Login Meshplay with specified provider
          usage: meshplayctl system login -p Meshplay

    logout:
      name: logout
      description: Invalidate current session with your Meshplay Provider.
      usage: meshplayctl system logout

    check:
      name: check
      description: Run system checks for both pre and post mesh deployment scenarios on Meshplay
      usage: meshplayctl system check [flags]
      example: meshplayctl system check
      flags:
        preflight:
          name: --preflight, --pre
          description: Run Pre-mesh deployment checks (Docker and Kubernetes)
          usage: meshplayctl system check --preflight
          example: meshplayctl system check --preflight
        adapter:
          name: --adapter
          description: Run checks on specific mesh adapter
          usage: meshplayctl system check --adapter [adapter-name]
          example: meshplayctl system check --adapter meshplay-istio:10000
        operator:
          name: --operator
          description: Verify the health of Meshplay Operator's deployment with MeshSync and Broker
          usage: meshplayctl system check --operator
          example: meshplayctl system check --operator
        adapters:
          name: --adapters
          description: Check status of meshplay adapters
          usage: meshplayctl system check --adapters
          example: meshplayctl system check --adapters
        components:
          name: --components
          description: Check status of Meshplay components
          usage: meshplayctl system check --components
          example: meshplayctl system check --components

system-channel:
  name: system channel
  description: Switch between release channels.
  usage: meshplayctl system channel

  subcommands:
    set:
      name: set
      description: Subscribe to release channel and version.
      usage: meshplayctl system channel set [stable|stable-version|edge|edge-version]
      example: |
        meshplayctl system channel set stable
          meshplayctl system channel set edge
          meshplayctl system channel set v0.5.60
    switch:
      name: switch
      description: switch release channel and version
      usage: meshplayctl system channel switch [stable|stable-version|edge|edge-version]
      example: |
        meshplayctl system channel switch stable
          meshplayctl system channel switch edge
          meshplayctl system channel switch v0.5.60
    view:
      name: view
      description: view release channel and version
      usage: meshplayctl system channel view
      flags:
        all:
          name: --all, -a
          description: view release channel and version
          usage: meshplayctl system channel view --all

system-context:
  name: system context
  description: Display the current context.
  usage: meshplayctl system context

  subcommands:
    create:
      name: create
      description: create a new context in config.yaml file
      usage: meshplayctl system context create [context name]
      example: |
        meshplayctl system context create k8s-sample
          meshplayctl system context create docker-edge
      flags:
        adapters:
          name: --components, -a
          description: create a new context in config.yaml file- specify the list of adapters to be added
          usage: meshplayctl system context create [context name] --adapters [list of adapters]
          example: meshplayctl system context create k8s-sample --adapters "meshplay-osm:10010", "meshplay-istio:10000"
        set:
          name: --set, -s
          description: create a new context in config.yaml file- set as current context
          usage: meshplayctl system context create [context name] --set
          example: meshplayctl system context create k8s-sample --set
        url:
          name: --url, -u
          description: create a new context in config.yaml file- set Meshplay server URL. Defaults to "https://localhost:9081"
          usage: meshplayctl system context create [context name] --url [URL]
          example: meshplayctl system context create k8s-sample --url "https://localhost:9990"
        platform:
          name: --platform, -p
          description: Platform to deploy Meshplay
          usage: meshplayctl system context create context-name --platform docker
    delete:
      name: delete
      description: delete an existing context from Meshplay config file
      usage: meshplayctl system context delete [context name]
      example: |
        meshplayctl system context delete k8s-sample
          meshplayctl system context delete docker-edge
    switch:
      name: switch
      description: configure meshplayctl to actively use one one context vs. the another context
      usage: meshplayctl system context switch [context name]
      example: |
        meshplayctl system context switch k8s-sample
          meshplayctl system context switch docker-edge
    view:
      name: view
      description: view the configurations of the current context
      usage: meshplayctl system context view
      flags:
        context:
          name: --context, -c
          description: view the configurations of the specified context
          usage: meshplayctl system context view --context [context name]
          example: meshplayctl system context view --context docker-edge
        all:
          name: --all
          description: if set, shows the configurations of all the contexts
          usage: meshplayctl system context view --all
    list:
      name: list
      description: List all contexts present
      usage: meshplayctl system context list

system-provider:
  name: system provider
  description: Enforce a provider. Choose between available Meshplay providers
  usage: |
    meshplayctl system provider [flags]
    meshplayctl system provider [command]
  example: |
    To view provider
    meshplayctl system provider view
    // To list all available providers
    meshplayctl system provider list
    // To set a provider
    meshplayctl system provider set [provider]
    // To switch provider and redeploy Meshplay
    meshplayctl system provider switch [provider]
    // To reset provider to default
    meshplayctl system provider reset

  subcommands:
    set:
      name: set
      description: Set provider to desired value
      usage:  meshplayctl system provider set [provider] [flags]
      example:  meshplayctl system provider set Meshplay
      flags:
        force:
          name: --force
          description: Force set the provider
          usage: meshplayctl system provider set [provider] --force
          example: meshplayctl system provider set Meshplay --force
    reset:
      name: reset
      description: Reset provider for current context to default (Meshplay)
      usage: meshplayctl system provider reset [flags]
      example: meshplayctl system provider reset
    switch:
      name: switch
      description: Switch provider of context in focus and redeploy Meshplay
      usage: meshplayctl system provider switch [provider] [flags]
      example: meshplayctl system provider switch Meshplay
    list:
      name: list
      description: List available providers from meshconfig
      usage: meshplayctl system provider list [flags]
      example: meshplayctl system provider list
    view:
      name: view
      description: View current provider value
      usage: meshplayctl system provider view [flags]
      example: meshplayctl system provider view
      flags:
        all:
          name: --all, -a
          description: Show provider for all contexts
          usage: meshplayctl system provider view --all
          example: meshplayctl system provider view --all

perf:
  name: perf
  description: Performance Management and Benchmarking using Meshplay CLI
  usage: meshplayctl perf --name "a quick stress test" --url http://192.168.1.15/productpage --qps 300 --concurrent-requests 2 --duration 30s --token "provider=Meshplay"

  flags:
    output-format:
      name: --output-format, -o
      description: format to display in json or yaml.
      usage: meshplayctl perf --token [path to access token] --output-format [format]
      example:
        meshplayctl perf --token "~/Downloads/auth.json" --output-format json
        meshplayctl perf --token "~/Downloads/auth.json" --output-format json
    token:
      name: --token
      description: (required) Path to Meshplay user's access token.
      usage: meshplayctl perf --token [path to access token]
      example: meshplayctl perf --token "~/Downloads/auth.json"

  subcommands:
    apply:
      name: apply
      description: Runs Performance test using existing profiles or using flags.
      usage: |

        # Execute a Performance test with the specified performance profile
        meshplayctl perf apply [profile-name] --flags

        # Execute a Performance test without a specified performance profile
        meshplayctl perf apply [profile-name] --url [url]

        # Run Performance test using SMP compatible test configuration
        meshplayctl perf apply -f [filepath]
      example: meshplayctl perf apply test-sam --url https://192.168.1.15/productpage
      flags:
        concurrent-requests:
          name: --concurrent-requests
          arg: apply
          description: "Number of Parallel Requests (default: 1)."
          usage: meshplayctl perf apply [profile-name] --url [URL] --concurrent-requests [number of requests]
          example: meshplayctl perf apply local-perf --url https://192.168.1.15/productpage --concurrent-requests 3
        duration:
          name: --duration
          arg: apply
          description: Length of the test.
          usage: meshplayctl perf apply [profile-name] --url [URL] --duration [time]
          example: meshplayctl perf apply local-perf --url https://192.168.1.15/productpage --duration 35s

        file:
          name: --file
          arg: apply
          description: "Path to cloud native performance test configuration file (default: empty string)."
          usage: meshplayctl perf apply [profile-name] --url [URL] --file [path to file]
          example: meshplayctl perf apply local-perf --url https://192.168.1.15/productpage --file perf-config.yaml
        load-generator:
          name: --load-generator
          arg: apply
          description: "Choice of load generator - fortio (OR) wrk2 (default: fortio)."
          usage: meshplayctl perf apply [profile-name] --url [URL] --load-generator [fortio/wrk2]
          example: meshplayctl perf apply local-perf --url https://192.168.1.15/productpage --load-generator wrk2

        mesh:
          name: --mesh
          arg: apply
          description: Name of the system under test.
          usage: meshplayctl perf apply [profile-name] --url [URL] --mesh [name]
          example: meshplayctl perf apply local-perf --url https://192.168.1.15/productpage --mesh istio
        name:
          name: --name
          arg: apply
          description: "A memorable name for the test (default: random string)."
          usage: meshplayctl perf apply [profile-name] --url [URL] --name "name"
          example: meshplayctl perf apply local-perf --url https://192.168.1.15/productpage --name "local-test"
        qps:
          name: --qps
          arg: apply
          description: "Queries per second (default: 0) (0 - means to use the CPU unbounded to generate as many requests as possible)."
          usage: meshplayctl perf apply [profile-name] --url [URL] --qps [queries]
          example: meshplayctl perf apply local-perf --url https://192.168.1.15/productpage --qps 30
        url:
          name: --url
          arg: apply
          description: (required/optional) URL of the endpoint send load to during testing.
          usage: meshplayctl perf apply [profile-name] --url [URL]
          example: meshplayctl perf apply local-perf --url https://192.168.1.15/productpage
        cert-path:
          name: --cert-path
          arg: apply
          description: (optional) Path to the certificate to be used for the load test
          usage: meshplayctl perf apply [profile-name] --url "https://google.com" --cert-path path/to/cert.pem
          example: meshplayctl perf apply meshplay-profile-new --url "https://google.com" --cert-path path/to/cert.pem
        disable-cert:
          name: --disable-cert
          arg: apply
          description: (optional) Do not use certificate present in the profil
          usage: meshplayctl perf apply [profile-name] --url "https://google.com" --disable-cert
    profile:
      name: profile
      description: List all the available performance profiles
      usage: |
        # View performance profiles
        meshplayctl perf profile [profile-id] [flags]
      example: |
        # List performance profiles
          meshplayctl perf profile

        # Search for performance profiles
        meshplayctl perf profile soak-test

        # View detailed information about a performance profile
        meshplayctl perf profile --view
      flags:
        page:
          name: --page, -p
          description: "(optional) List next set of performance profiles with --page (default = 1) (default 1)."
          usage: meshplayctl perf profile --page [page number]
          example: meshplayctl perf profile --page 2
        view:
          name: --view
          description: "(optional) View more information of the performance profile."
          usage: meshplayctl perf profile --view
          example: meshplayctl perf profile --view

    result:
      name: result
      description: View the results of a performance profile.
      usage: |
        # View results of a performance profile
        meshplayctl perf result [profile-name] [flags]
      example: |
        # List test results of a performance profile
          meshplayctl perf result soak-test

        # View detailed information of a performance test result
        meshplayctl perf result soak-test --view
      flags:
        page:
          name: --page, -p
          description: "(optional) List next set of performance results with --page (default = 1) (default 1)."
          usage: meshplayctl perf result --page [page number]
          example: meshplayctl perf result --page 2
        view:
          name: --view
          description: "(optional) View more information of the performance test results."
          usage: meshplayctl perf result --view
          example: meshplayctl perf result --view

adapter:
  name: adapter
  description: Lifecycle management of cloud native infrastructure
  subcommands:
    validate:
      name: validate
      description: validate configuration conformance to different standard specifications
      flags:
        adapter:
          name: --adapter, -a
          description: (required) adapter to use for validation. Defaults to "meshplay-osm:10010"
          usage: meshplayctl adapter validate --adapter [name of the adapter]
          example: meshplayctl adapter validate --adapter meshplay-istio:10000 -t "~/Download/auth.json"
        namespace:
          name: --namespace, -n
          description: Kubernetes namespace to be used for deploying the validation tests and sample workload
          usage: meshplayctl adapter validate --namespace [namespace to be used]
          example: meshplayctl adapter validate --namespace test-x1 -t "~/Download/auth.json"
        spec:
          name: --spec, -s
          description: (required) specification to be used for conformance test. Defaults to "smi"
          usage: meshplayctl adapter validate --spec [specification to be used for conformance test]
          example: meshplayctl adapter validate --spec smi -t "~/Download/auth.json"
        tokenpath:
          name: --tokenpath, -t
          description: (required) path to token for authenticating to Meshplay API
          usage: meshplayctl adapter validate --tokenPath [path to token for authentication]
          example: meshplayctl adapter validate --tokenPath "~/Downloads/auth.json"

    remove:
      name: remove
      description: Remove service mesh in the connected Kubernetes cluster
      usage: meshplayctl adapter remove [args] [flags] [args]
      flags:
        namespace:
          name: --namespace, -n
          description: Kubernetes namespace to be used for removing a service mesh under a specific namespace
          usage: meshplayctl adapter remove [args] --namespace [namespace to be used]
          example: meshplayctl adapter remove linkerd --namespace linkerd-ns -t "~/Download/auth.json"

    deploy:
      name: deploy
      description: Deploy a service mesh into the cluster
      usage: meshplayctl adapter deploy [flags]
      example: meshplayctl adapter deploy -t "~/Downloads/auth.json"
      flags:
        adapter:
          name: --adapter, -a
          description: (required) adapter to use for validation. Defaults to "meshplay-osm:10010"
          usage: meshplayctl adapter deploy --adapter [name of the adapter]
          example: meshplayctl adapter deploy --adapter meshplay-istio:10000
        namespace:
          name: --namespace, -n
          description: Kubernetes namespace to be used for deploying the validation tests and sample workload
          usage: meshplayctl adapter deploy --namespace [namespace to be used]
          example: |
            meshplayctl adapter deploy --namespace docker-desktop
              meshplayctl adapter deploy --namespace minikube
        token:
          name: --tokenpath, -t
          description: (required) path to token for authenticating to Meshplay API
          usage: meshplayctl adapter deploy --tokenPath [path to token for authentication]
          example: meshplayctl adapter deploy --tokenPath "~/Downloads/auth.json"

pattern:
  name: pattern
  description: Manage cloud native infrastructure using predefined patterns
  usage: meshplayctl pattern [flags] or meshplayctl pattern [command]
  example: meshplayctl pattern list
  flags:
    file:
      name: --file, -f
      description: (required) path to pattern file.
      usage: |
        meshplayctl pattern apply --file [pattern path]
        meshplayctl pattern delete --file [pattern path]
      example: |
        meshplayctl pattern apply --file "bookInfo.yaml"
          meshplayctl pattern delete --file "bookInfo.yaml"

  subcommands:
    apply:
      name: apply
      description: apply pattern file will trigger deploy of the pattern file
      usage: meshplayctl pattern apply [flags]
      flags:
        file:
          name: --file, -f
          description: apply pattern file will trigger deploy of the pattern file and also supports file retrieval from GitHub
          usage: meshplayctl pattern apply --file [path to pattern file]
          example: meshplayctl pattern apply -f "bookInfo.yaml"

    delete:
      name: delete
      description: Deprovision cloud native infrastructure using a design /pattern file
      usage: meshplayctl pattern delete [flags]
      flags:
        file:
          name: --file, -f
          description: Deletes the resources that were created, using pattern file
          usage: meshplayctl pattern delete -f [path to pattern file]
          example: meshplayctl pattern delete -f "bookInfo.yaml"

    list:
      name: list
      description: displays a list of available pattern files
      usage: meshplayctl pattern list
      flags:
        page:
          name: --page, -p
          description: list patterns by specific page number (25 patterns per page)
        verbose:
          name: --verbose, -v
          description: show all pattern file metadata
          usage: meshplayctl pattern list --verbose
          example: meshplayctl pattern list -v

    view:
      name: view
      description: displays the contents of a specific pattern file
      usage: meshplayctl pattern view [pattern-name|pattern-id]
      flags:
        all:
          name: --all, -a
          description: show all pattern file content
          usage: meshplayctl pattern view [pattern-name|pattern-id] --all
          example: meshplayctl pattern view bookInfo --all
        json:
          name: -o json
          description: display the content of a pattern in json format
          usage: meshplayctl pattern view [pattern-name|pattern-id] -o json
          example: meshplayctl pattern view bookInfo -o json

    import:
      name: import
      description: Import app manifests
      usage: meshplayctl pattern import -f [file/URL]
      example: meshplayctl pattern import -f "bookInfo.yaml"
      flags:
        file:
          name: --file, -f
          description: Path/URL to app file
          usage: meshplayctl pattern import -f [file/URL]
          example: meshplayctl pattern import -f "bookInfo.yaml"
        source-type:
          name: --source-type, -s
          description: Type of source file (ex. manifest / compose / helm)
          usage: meshplayctl pattern import -f [file/URL] --source-type [manifest/compose/helm]
          example: meshplayctl pattern import -f "bookInfo.yaml" --source-type manifest
    export:
      name: export
      description: Export a design from Meshplay
      usage: meshplayctl pattern export [pattern-name | ID]
      example: |
        # Export a design with a specific ID
        meshplayctl pattern export [pattern-name | ID]

        # Export a design with a specific ID and type
        meshplayctl pattern export -[pattern-name | ID] --type [design-type]

        # Export a design and save it to a specific directory
        meshplayctl pattern export -[pattern-name | ID] --output ./designs

        # Export a design with a specific type and save it to a directory
        meshplayctl pattern export [pattern-name | ID] --type [design-type] --output ./exports
      flags:
        type:
          name: --type
          description: Specify the design type to export (default current). Supported types are oci,current,original.
          usage: meshplayctl pattern export --type [design-type]
          example: meshplayctl pattern export --type oci
        output:
          name: --output, -o
          description: Specify the output directory to save the design
          usage: meshplayctl pattern export --output [directory-path]
          example: meshplayctl pattern export --output ./exports

    offboard:
      name: offboard
      description: Offboard application
      usage: meshplayctl pattern offboard [app-name] [flags]
      flags:
        file:
          name: --file, -f
          description: Offboard application with an application file
          usage: meshplayctl pattern offboard -f [filepath]
          example: meshplayctl pattern offboard -f "bookInfo.yaml"

    onboard:
      name: onboard
      description: Onboard application
      usage: meshplayctl pattern onboard [app name] [flags]
      flags:
        file:
          name: --file, -f
          description: Onboard application with application file
          usage: meshplayctl pattern onboard --file [filepath]
          example: meshplayctl pattern onboard -f "bookInfo.yaml"
        skip-save:
          name: --skip-save
          description: Skip saving an application
          usage: meshplayctl pattern onboard --file [filepath] --skip-save
          example: meshplayctl pattern onboard -f "bookInfo.yaml" --skip-save
        source-type:
          name: --source-type, -s
          description: Type of source file (ex. manifest / compose / helm)
          usage: meshplayctl pattern onboard meshplayctl pattern onboard --file [filepath] --source-type manifest
          example: meshplayctl meshplayctl pattern onboard -f "bookInfo.yaml" --source-type manifest

filter:
  name: filter
  description: Service Mesh Filter Management
  usage: meshplayctl filter [command] or
  example: meshplayctl filter list
  subcommands:
    import:
      name: import
      description: Upload WASM filter file to Meshplay Server
      usage: meshplayctl filter import [URI/filepath] [flags]
      example: meshplayctl filter import https://example.com/myfilter.wasm
      flags:
        name:
          name: --name, -n
          description: (optional) filter name
          usage: meshplayctl filter import /path/to/filter.wasm --name [string]
          example: meshplayctl filter import https://example.com/myfilter.wasm --name myfilter
        wasm-config:
          name: --wasm-config, -w
          description: (optional) WASM configuration filepath/string
          usage: meshplayctl filter import /path/to/filter.wasm --wasm-config [filepath|string]
          example: meshplayctl filter import https://example.com/myfilter.wasm -w http-trace.wasm
    delete:
      name: delete
      description: Delete filter from Meshplay Server
      usage: meshplayctl filter delete [filter-name | ID]
      example: meshplayctl filter delete myfilter.wasm
    list:
      name: list
      description: List all WASM filters
      usage: meshplayctl filter list [flags]
      example: meshplayctl filter list
      flags:
        verbose:
          name: --verbose, -v
          description: Display full length user and filter file identifiers
          usage: meshplayctl filter list --verbose
          example: meshplayctl filter list -v
    view:
      name: view
      description: View the specified WASM filter
      usage: meshplayctl filter view [filter-name | ID] [flags]
      example: meshplayctl filter view myfilter.wasm
      flags:
        all:
          name: --all, -a
          description: (optional) view all filters available
          usage: meshplayctl filter view --all
          example: meshplayctl filter view --all
        output-format:
          name: --output-format, -o
          description: (optional) format to display in [json|yaml] (default "yaml")
          usage: meshplayctl filter view [filter-name | ID] -o [json/yaml]
          example: meshplayctl filter view myfilter.wasm -o json

registry:
  name: registry
  description: Manage the state and contents of Meshplay's internal registry of capabilities.
  usage: meshplayctl registry [command] [flags]
  flags:
    help:
      name: --help, -h
      description: help for registry
      usage: meshplayctl registry --help
      example: meshplayctl registry --help
  subcommands:
    publish:
      name: publish
      description: Publish Meshplay Models to Websites, Remote Provider, Meshplay Server
      usage: meshplayctl registry publish [system] [google-sheet-credential] [sheet-id] [models-output-path] [imgs-output-path]
      flags:
        output-format:
          name: --output-format, -o
          description: (optional) format to display in [md | mdx | js]
          usage: meshplayctl registry publish [system] [google-sheet-credential] [sheet-id] [models-output-path] [imgs-output-path] -o [md | mdx | js]
          example: meshplayctl registry publish [system] [google-sheet-credential] [sheet-id] [models-output-path] [imgs-output-path] -o md
    update:
      name: update
      description: Update the registry with latest data.
      usage: meshplayctl registry update
      flags:
        input:
          name: --input, -i
          description: (optional) path to capability file
        spreadsheet-cred:
          name: --spreadsheet-cred
          description: base64 encoded credential to download the spreadsheet
          usage: meshplayctl registry publish [system] [google-sheet-credential] [sheet-id] [models-output-path] [imgs-output-path] --spreadsheet-cred [path to spreadsheet credential file]
          example: meshplayctl registry publish [system] [google-sheet-credential] [sheet-id] [models-output-path] [imgs-output-path] --spreadsheet-cred "~/Downloads/auth.json"
        spreadsheet-id:
          name: --spreadsheet-id
          description: id of the spreadsheet to download
          usage: meshplayctl registry publish [system] [google-sheet-credential] [sheet-id] [models-output-path] [imgs-output-path] --spreadsheet-id [spreadsheet id]
          example: meshplayctl registry publish [system] [google-sheet-credential] [sheet-id] [models-output-path] [imgs-output-path] --spreadsheet-id "1a2b3c4d5e6f7g8h9i0j"
    generate:
      name: generate
      description: Generate Models to the registry
      usage: meshplayctl registry generate [flags]
      flags:
        output-format:
          name: --output-format, -o
          description: (optional) format to display in [md | mdx | js]
        registrant_cred:
          name: --registrant-cred
          description: path pointing to the registrant credetial definition
        registrant_def:
          name: --registrant-def
          description: path pointing to the registrant connection definition
        spreadsheet_cred:
          name: --spreadsheet-cred
          description: base64 encoded credential to download the spreadsheet
        spreadsheet_id:
          name: --spreadsheet-id
          description: id of the spreadsheet to download

model:
  name: model
  description: A unit of packaging to define managed infrastructure and their relationships, and details specifics of how to manage them.
  usage: meshplayctl model [command] [flags]
  flags:
    count:
      name: --count
      description: (optional) Get the number of models in total
    help:
      name: --help, -h
      description: help for model
      usage: meshplayctl model --help
      example: meshplayctl model --help
  subcommands:
    list:
      name: list
      description: List models present in the registry
      usage: meshplayctl model list [flags]
      flags:
        page:
          name: --page, -p
          description: list models by specific page number (25 models per page)
    search:
      name: search
      description: Using a keyword(s) search the registry for matching model(s)
      usage: meshplayctl model search [keyword]
    view:
      name: view
      description: View details of a specific model
      usage: meshplayctl model view [model-name]
      flags:
        output-format:
          name: -o, --output-format
          description: (optional) format to display in [json|yaml] (default "yaml")
    import:
      name: import
      description: Import models using a file or filepath directly to the meshplay registry
      usage: meshplayctl model import [ file | filepath ]
      examples:
         - import model /path/to/[file.yaml|file.json]
         - import model /path/to/models
    export:
      name: export
      description: Export a model by name to the given output type (default is oci).
      usage: meshplayctl model export [ model-name ]
      examples:
         - model export [model-name] -l /home/meshplay
         - model export [model-name] --discard-components
         - model export [model-name] -o yaml

components:
  name: components
  description: Fundamental building block used to represent and define the infrastructure under management
  usage: meshplayctl components [command] [flags]
  flags:
    count:
      name: --count
      description: (optional) Get the number of components in total
    help:
      name: --help, -h
      description: help for components
      usage: meshplayctl components --help
      example: meshplayctl components --help
  subcommands:
    list:
      name: list
      description: List all components registered in Meshplay Server
      usage: meshplayctl components list [flags]
      flags:
        page:
          name: --page, -p
          description: list components by specific page number (25 models per page)
    search:
      name: search
      description: Using a keyword(s) search the registry for matching component(s)
      usage: meshplayctl components search [keyword]
    view:
      name: view
      description: View details of a specific component
      usage: meshplayctl components view [component-name]
      flags:
        output-format:
          name: -o, --output-format
          description: (optional) format to display in [json|yaml] (default "yaml")
        save:
          name: --save
          description: Save output as a JSON/YAML file
          usage: meshplayctl components view --output-format [json|yaml] --save [filepath]
          example: meshplayctl components view --save "bookInfo.yaml" --output-format yaml

exp:
  connections:
    name: connections
    description: Manage connections
    usage: meshplayctl exp connections [command] [flags]
    flags:
      help:
        name: --help, -h
        description: help for exp connections
        usage: meshplayctl exp connections --help
        example: meshplayctl exp connections --help
    subcommands:
      delete:
        name: delete
        description: delete a connection
        usage: meshplayctl exp connections delete [connection_id]
      list:
        name: list
        description: list all the connections
        usage: meshplayctl exp connections list [flags]
        flags:
          page:
            name: -p, --page
            description: "(optional) List next set of exp connections list with --page (default = 1) (default 1)."
            usage: meshplayctl exp connections list --page [page number]
            example: meshplayctl exp connections list --page 2
          count:
            name: --count
            description: (optional) Get the number of exp connections in total
  environment:
    name: environment
    description: View list of environments and detail of environments
    usage: meshplayctl exp environment [command] [flags]
    flags:
    subcommands:
      create:
        name: create
        description: create a new environments by providing the name and description of the environment
        usage: meshplayctl exp environment create [flags]
        example: meshplayctl
        flags:
          description:
            name: -d, --description
            description: description of the environment
          name:
            name: --name, -n
            description: (optional) name of the environment
          org:
            name: -o, --orgId
            description: organization id
            usage: meshplayctl exp environment create --orgID [orgID] --name [name] --description [description]
      delete:
        name: delete
        description: delete a new environments by providing the name and description of the environment
        usage: meshplayctl exp environment delete [environmentId]
      list:
        name: list
        description: list name of all registered environments
        usage: meshplayctl exp environment list [flags]
        flags:
          org:
            name: -o, --orgId
            description: organization id
            usage: meshplayctl exp environment list --orgID [orgId]
      view:
        name: view
        description: view a environments registered in Meshplay Server
        usage: meshplayctl exp environment view [flags]
        flags:
          output-format:
            name: -o, --output-format
            description: (optional) format to display in [json|yaml] (default "yaml")
          save:
            name: -s, --save
            description: (optional) save output as a JSON/YAML file
            usage: meshplayctl exp environment view --output-format [json|yaml] --save [filepath]
            example: meshplayctl exp environment view --save "bookInfo.yaml" --output-format yaml
  relationship:
    name: relationship
    description: View list of relationships and details of relationship
    usage: meshplayctl exp relationship [command] [flags]
    flags:
    subcommands:
      generate:
        name: generate
        description: generate relationships docs from the google spreadsheets
        usage: meshplayctl exp relationship generate [flags]
        flags:
          sheet:
            name: -s, --sheetId
            description: google sheet id
      list:
        name: list
        description: list all relationships registered in Meshplay Server
        usage: meshplayctl exp relationship list [flags]
        flags:
          page:
            name: -p, --page
            description: "(optional) List next set of exp relationship list with --page (default = 1) (default 1)."
            usage: meshplayctl exp relationship list --page [page number]
            example: meshplayctl exp relationship list --page 2
      view:
        name: view
        description: view a relationship queried by the model name
        usage: meshplayctl exp relationship view [flags]
        flags:
          output-format:
            name: -o, --output-format
            description: (optional) format to display in [json|yaml] (default "yaml")
  workspace:
    name: workspace
    description: View list of workspaces and detail of workspaces
    usage: meshplayctl exp workspace [command] [flags]
    flags:
    subcommands:
      create:
        name: create
        description: create a new workspace by providing the name, description, and organization ID
        usage: meshplayctl exp workspace create [flags]
        flags:
          description:
            name: -d, --description
            description: description of the workspace
          name:
            name: -n, --name
            description: name of the workspace
          org:
            name: -o, --orgId
            description: organization id
            usage: meshplayctl exp workspace create --orgId [orgId] --name [name] --description [description]
      list:
        name: list
        description: list name of all registered workspaces
        usage: meshplayctl exp workspace list [flags]
        flags:
          org:
            name: -o, -orgId
            description: organization id